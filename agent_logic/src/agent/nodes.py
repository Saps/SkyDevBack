from typing import Literal
from langgraph.types import Command, interrupt
from langchain_core.messages import AIMessage, HumanMessage
from src.utils.graph_utils import StateHrAgent, giga, RouteLLMOut
from src.utils.logger import logger

from pydantic import BaseModel, Field, ValidationError
import json


ROUTER_SYSTEM = (
    "–¢—ã ‚Äî –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ HR-–∫–æ–ø–∞–π–ª–æ—Ç–∞. –ó–∞–¥–∞—á–∏:\n"
    "1) –ú–∞—Ç—á–∏–Ω–≥ —Ä–µ–∑—é–º–µ‚Üî–≤–∞–∫–∞–Ω—Å–∏—è.\n"
    "2) –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.\n"
    "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:\n"
    '{ "intent": "<compatibility|interview|clarify|out_of_scope>", '
    '"relevance": {"compatibility": 0-100, "interview": 0-100}, '
    '"reason": "<–∫—Ä–∞—Ç–∫–æ>" }'
)

ROUTER_USER_TMPL = (
    "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n-----\n{text}\n-----\n"
    "–û—Ü–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–≤—É–º —Ñ—É–Ω–∫—Ü–∏—è–º (0..100) –∏ –≤—ã–±–µ—Ä–∏ intent.\n"
    "–ï—Å–ª–∏ –æ–±–µ < 40 ‚Äî intent='out_of_scope' (–µ—Å–ª–∏ –æ—Ñ—Ñ—Ç–æ–ø) –∏–ª–∏ 'clarify' (–µ—Å–ª–∏ –ø–æ —Ç–µ–º–µ HR, –Ω–æ –Ω–∞–¥–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ)."
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
# greet
def greet(state: StateHrAgent) -> Command[Literal["human"]]:
    msg = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø HR-–∫–æ–ø–∞–π–ª–æ—Ç. –ú–æ–≥—É:\n"
        "1) –û—Ü–µ–Ω–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
        "2) –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –¥–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.\n"
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ."
    )
    logger.log("CHAT", "‚ñ∂Ô∏è greet(): –∑–∞–ø—É—Å–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
    logger.log("CHAT", f"ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {msg}")  # <- –¥–æ–±–∞–≤–∏–ª–∏ —è–≤–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    return Command(update={"messages":[AIMessage(content=msg)]}, goto="human")

# human
def human(state: StateHrAgent) -> Command[Literal["router"]]:
    text = interrupt("human")
    logger.log("CHAT", f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}")
    return Command(update={"user_input": text, "messages":[HumanMessage(content=text)]}, goto="router")

# router (LLM –≤–∞—Ä–∏–∞–Ω—Ç)
def router(state: StateHrAgent) -> Command[Literal["compatibility_stub","interview_stub","human"]]:
    text = state.get("user_input", "").strip()
    logger.log("CONTEXT", f"üîç router(): –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: {text}")

    sys_msg = ROUTER_SYSTEM
    user_msg = ROUTER_USER_TMPL.format(text=text)
    llm_resp = giga.invoke([{"role":"system","content":sys_msg},
                            {"role":"user","content":user_msg}]).content
    logger.log("DATA", f"üì© LLM –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–æ—É—Ç–∏–Ω–≥–∞: {llm_resp}")

    # –ü–∞—Ä—Å–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ—Ä–µ–∂–Ω–æ
    intent = "clarify"
    relevance = {"compatibility": 0, "interview": 0}
    reason = ""

    try:
        data = json.loads(llm_resp)
        intent = data.get("intent", intent)
        rel = data.get("relevance", {}) or {}
        relevance["compatibility"] = int(rel.get("compatibility", 0) or 0)
        relevance["interview"]     = int(rel.get("interview", 0) or 0)
        reason = str(data.get("reason", "") or "")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM: {e}")
        # –º—è–≥–∫–∏–π fallback ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        msg = ("–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã:\n"
               "‚Ä¢ ¬´–û—Ü–µ–Ω–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏¬ª\n"
               "‚Ä¢ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ–ø–∏—à–∏ –ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞¬ª")
        return Command(update={"messages":[AIMessage(content=msg)],
                               "intent": None, "meta":{"router_error": str(e)}},
                       goto="human")

    logger.log("REASONING", f"intent={intent}, relevance={relevance}, reason='{reason}'")

    feedback = (f"–†–æ—É—Ç–∏–Ω–≥: intent = {intent}\n"
                f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Üí matching: {relevance['compatibility']}%, "
                f"interview: {relevance['interview']}%.")

    if intent == "compatibility":
        return Command(update={"messages":[AIMessage(content=feedback)],
                               "intent":"compatibility",
                               "meta":{"relevance": relevance, "reason": reason}},
                       goto="compatibility_stub")

    if intent == "interview":
        return Command(update={"messages":[AIMessage(content=feedback)],
                               "intent":"interview",
                               "meta":{"relevance": relevance, "reason": reason}},
                       goto="interview_stub")

    # clarify / out_of_scope
    help_msg = (
        f"{feedback}\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ ¬´–û—Ü–µ–Ω–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ —Å —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–µ–π¬ª\n"
        "‚Ä¢ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ–ø–∏—à–∏ –ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞¬ª"
    )
    return Command(update={"messages":[AIMessage(content=help_msg)],
                           "intent": intent,
                           "meta":{"relevance": relevance, "reason": reason}},
                   goto="human")

# –ó–∞–≥–ª—É—à–∫–∏ –∑–∞–¥–∞—á (–ø–æ–∫–∞ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã)
def compatibility_stub(state: StateHrAgent):
    msg = "üîß –ù–æ–¥–∞ ¬´–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏¬ª –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞."
    logger.log("CHAT", f"{msg}")
    return Command(update={"messages":[AIMessage(content=msg)]}, goto="human")

def interview_stub(state: StateHrAgent):
    msg = "üîß –ù–æ–¥–∞ ¬´–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é / –ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞¬ª –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞."
    logger.log("CHAT", f"{msg}")
    return Command(update={"messages":[AIMessage(content=msg)]}, goto="human")
